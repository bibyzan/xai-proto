syntax = "proto3";

package xai_api;

// An API service for interaction with image generation models.
service Image {
  // Create an image based on a text prompt and optionally another image.
  rpc GenerateImage(GenerateImageRequest) returns (ImageResponse) {}
}

// Request message for generating an image.
message GenerateImageRequest {
  reserved 13;

  // Input prompt to generate an image from.
  string prompt = 1;

  // Optional input image to perform generations based on.
  ImageUrlContent image = 5;

  // Name or alias of the image generation model to be used.
  string model = 2;

  // Number of images to generate. Allowed values are [1, 10].
  optional int32 n = 3;

  // An opaque string supplied by the API client (customer) to identify a user.
  // The string will be stored in the logs and can be used in customer service
  // requests to identify certain requests.
  string user = 4;

  // Optional field to specify the image format to return the generated image(s)
  // in. See ImageFormat enum for options.
  ImageFormat format = 11;
}

// The response from the image generation models containing the generated image(s).
message ImageResponse {
  // A list of generated images (including relevant metadata).
  repeated GeneratedImage images = 1;

  // The model used to generate the image (ignoring aliases).
  string model = 2;
}

// Contains all data related to a generated image.
message GeneratedImage {
  // The generated image.
  oneof image {
    // A base-64 encoded string of the image.
    string base64 = 1;

    // A url that points to the generated image.
    string url = 3;
  }

  // The up sampled prompt that was used to generate the image.
  string up_sampled_prompt = 2;

  // Whether the image generated by the model respects moderation rules.
  // The field will be true if the image respect moderation rules. Otherwise
  // the field will be false and the image field is replaced by a placeholder.
  bool respect_moderation = 4;
}

// Contains data relating to an image that is provided to the model.
message ImageUrlContent {
  // This is either an image URL or a base64-encoded version of the image.
  // The following image formats are supported: PNG and JPG.
  // If an image URL is provided, the image will be downloaded for every API
  // request without being cached. Images are fetched using
  // "XaiImageApiFetch/1.0" user agent, and will timeout after 5 seconds.
  // The image size is limited to 10 MiB. If the image download fails, the API
  // request will fail as well.
  string image_url = 1;

  // The level of pre-processing resolution that will be applied to the image.
  ImageDetail detail = 2;
}

// Indicates the level of preprocessing to apply to images that will be fed to
// the model.
enum ImageDetail {
  // Detail level is invalid.
  DETAIL_INVALID = 0;

  // The system will decide the image resolution to use.
  DETAIL_AUTO = 1;

  // The model will process a low-resolution version of the image. This is
  // faster and cheaper (i.e. consumes fewer tokens).
  DETAIL_LOW = 2;

  // The model will process a high-resolution of the image. This is slower and
  // more expensive but will allow the model to attend to more nuanced details
  // in the image.
  DETAIL_HIGH = 3;
}

// The image format to be returned (base-64 encoded string or a url of
// the image).
enum ImageFormat {
  // Image format is invalid.
  IMG_FORMAT_INVALID = 0;

  // A base-64 encoding of the image.
  IMG_FORMAT_BASE64 = 1;

  // An URL at which the user can download the image.
  IMG_FORMAT_URL = 2;
}
