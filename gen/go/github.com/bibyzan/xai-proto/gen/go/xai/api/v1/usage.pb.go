// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: xai/api/v1/usage.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Records the cost associated with a sampling request (both chat and sample
// endpoints).
type SamplingUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of text completion tokens generated across all choices
	// (in case of n>1).
	CompletionTokens int32 `protobuf:"varint,1,opt,name=completion_tokens,json=completionTokens,proto3" json:"completion_tokens,omitempty"`
	// Total number of reasoning tokens generated across all choices.
	ReasoningTokens int32 `protobuf:"varint,6,opt,name=reasoning_tokens,json=reasoningTokens,proto3" json:"reasoning_tokens,omitempty"`
	// Total number of prompt tokens (both text and images).
	PromptTokens int32 `protobuf:"varint,2,opt,name=prompt_tokens,json=promptTokens,proto3" json:"prompt_tokens,omitempty"`
	// Total number of tokens (prompt + completion).
	TotalTokens int32 `protobuf:"varint,3,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`
	// Total number of (uncached) text tokens in the prompt.
	PromptTextTokens int32 `protobuf:"varint,4,opt,name=prompt_text_tokens,json=promptTextTokens,proto3" json:"prompt_text_tokens,omitempty"`
	// Total number of cached text tokens in the prompt.
	CachedPromptTextTokens int32 `protobuf:"varint,7,opt,name=cached_prompt_text_tokens,json=cachedPromptTextTokens,proto3" json:"cached_prompt_text_tokens,omitempty"`
	// Total number of image tokens in the prompt.
	PromptImageTokens int32 `protobuf:"varint,5,opt,name=prompt_image_tokens,json=promptImageTokens,proto3" json:"prompt_image_tokens,omitempty"`
	// Number of individual live search sources used.
	// Only applicable when live search is enabled.
	// e.g. If a live search query returns citations from both X and Web and news sources, this will be 3.
	// If it returns citations from only X, this will be 1.
	NumSourcesUsed int32 `protobuf:"varint,8,opt,name=num_sources_used,json=numSourcesUsed,proto3" json:"num_sources_used,omitempty"`
}

func (x *SamplingUsage) Reset() {
	*x = SamplingUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_usage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplingUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplingUsage) ProtoMessage() {}

func (x *SamplingUsage) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_usage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplingUsage.ProtoReflect.Descriptor instead.
func (*SamplingUsage) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_usage_proto_rawDescGZIP(), []int{0}
}

func (x *SamplingUsage) GetCompletionTokens() int32 {
	if x != nil {
		return x.CompletionTokens
	}
	return 0
}

func (x *SamplingUsage) GetReasoningTokens() int32 {
	if x != nil {
		return x.ReasoningTokens
	}
	return 0
}

func (x *SamplingUsage) GetPromptTokens() int32 {
	if x != nil {
		return x.PromptTokens
	}
	return 0
}

func (x *SamplingUsage) GetTotalTokens() int32 {
	if x != nil {
		return x.TotalTokens
	}
	return 0
}

func (x *SamplingUsage) GetPromptTextTokens() int32 {
	if x != nil {
		return x.PromptTextTokens
	}
	return 0
}

func (x *SamplingUsage) GetCachedPromptTextTokens() int32 {
	if x != nil {
		return x.CachedPromptTextTokens
	}
	return 0
}

func (x *SamplingUsage) GetPromptImageTokens() int32 {
	if x != nil {
		return x.PromptImageTokens
	}
	return 0
}

func (x *SamplingUsage) GetNumSourcesUsed() int32 {
	if x != nil {
		return x.NumSourcesUsed
	}
	return 0
}

// Usage of embedding models.
type EmbeddingUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of feature vectors produced from text inputs.
	NumTextEmbeddings int32 `protobuf:"varint,1,opt,name=num_text_embeddings,json=numTextEmbeddings,proto3" json:"num_text_embeddings,omitempty"`
	// The number of feature vectors produced from image inputs.
	NumImageEmbeddings int32 `protobuf:"varint,2,opt,name=num_image_embeddings,json=numImageEmbeddings,proto3" json:"num_image_embeddings,omitempty"`
}

func (x *EmbeddingUsage) Reset() {
	*x = EmbeddingUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_usage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbeddingUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbeddingUsage) ProtoMessage() {}

func (x *EmbeddingUsage) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_usage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbeddingUsage.ProtoReflect.Descriptor instead.
func (*EmbeddingUsage) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_usage_proto_rawDescGZIP(), []int{1}
}

func (x *EmbeddingUsage) GetNumTextEmbeddings() int32 {
	if x != nil {
		return x.NumTextEmbeddings
	}
	return 0
}

func (x *EmbeddingUsage) GetNumImageEmbeddings() int32 {
	if x != nil {
		return x.NumImageEmbeddings
	}
	return 0
}

var File_xai_api_v1_usage_proto protoreflect.FileDescriptor

var file_xai_api_v1_usage_proto_rawDesc = []byte{
	0x0a, 0x16, 0x78, 0x61, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x22, 0xf2, 0x02, 0x0a, 0x0d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x22, 0x72, 0x0a, 0x0e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x51, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x42, 0x0a, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0xa2, 0x02, 0x03, 0x58, 0x58, 0x58, 0xaa, 0x02, 0x06,
	0x58, 0x61, 0x69, 0x41, 0x70, 0x69, 0xca, 0x02, 0x06, 0x58, 0x61, 0x69, 0x41, 0x70, 0x69, 0xe2,
	0x02, 0x12, 0x58, 0x61, 0x69, 0x41, 0x70, 0x69, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x06, 0x58, 0x61, 0x69, 0x41, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_xai_api_v1_usage_proto_rawDescOnce sync.Once
	file_xai_api_v1_usage_proto_rawDescData = file_xai_api_v1_usage_proto_rawDesc
)

func file_xai_api_v1_usage_proto_rawDescGZIP() []byte {
	file_xai_api_v1_usage_proto_rawDescOnce.Do(func() {
		file_xai_api_v1_usage_proto_rawDescData = protoimpl.X.CompressGZIP(file_xai_api_v1_usage_proto_rawDescData)
	})
	return file_xai_api_v1_usage_proto_rawDescData
}

var file_xai_api_v1_usage_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_xai_api_v1_usage_proto_goTypes = []any{
	(*SamplingUsage)(nil),  // 0: xai_api.SamplingUsage
	(*EmbeddingUsage)(nil), // 1: xai_api.EmbeddingUsage
}
var file_xai_api_v1_usage_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_xai_api_v1_usage_proto_init() }
func file_xai_api_v1_usage_proto_init() {
	if File_xai_api_v1_usage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_xai_api_v1_usage_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SamplingUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_usage_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*EmbeddingUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xai_api_v1_usage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_xai_api_v1_usage_proto_goTypes,
		DependencyIndexes: file_xai_api_v1_usage_proto_depIdxs,
		MessageInfos:      file_xai_api_v1_usage_proto_msgTypes,
	}.Build()
	File_xai_api_v1_usage_proto = out.File
	file_xai_api_v1_usage_proto_rawDesc = nil
	file_xai_api_v1_usage_proto_goTypes = nil
	file_xai_api_v1_usage_proto_depIdxs = nil
}
