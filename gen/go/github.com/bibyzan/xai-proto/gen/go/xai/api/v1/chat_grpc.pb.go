// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: xai/api/v1/chat.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Chat_GetCompletion_FullMethodName           = "/xai_api.Chat/GetCompletion"
	Chat_GetCompletionChunk_FullMethodName      = "/xai_api.Chat/GetCompletionChunk"
	Chat_StartDeferredCompletion_FullMethodName = "/xai_api.Chat/StartDeferredCompletion"
	Chat_GetDeferredCompletion_FullMethodName   = "/xai_api.Chat/GetDeferredCompletion"
)

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// An API that exposes our language models via a Chat interface.
type ChatClient interface {
	// Samples a response from the model and blocks until the response has been
	// fully generated.
	GetCompletion(ctx context.Context, in *GetCompletionsRequest, opts ...grpc.CallOption) (*GetChatCompletionResponse, error)
	// Samples a response from the model and streams out the model tokens as they
	// are being generated.
	GetCompletionChunk(ctx context.Context, in *GetCompletionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetChatCompletionChunk], error)
	// Starts sampling of the model and immediately returns a response containing
	// a request id. The request id may be used to poll
	// the `GetDeferredCompletion` RPC.
	StartDeferredCompletion(ctx context.Context, in *GetCompletionsRequest, opts ...grpc.CallOption) (*StartDeferredResponse, error)
	// Gets the result of a deferred completion started by calling `StartDeferredCompletion`.
	GetDeferredCompletion(ctx context.Context, in *GetDeferredRequest, opts ...grpc.CallOption) (*GetDeferredCompletionResponse, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) GetCompletion(ctx context.Context, in *GetCompletionsRequest, opts ...grpc.CallOption) (*GetChatCompletionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatCompletionResponse)
	err := c.cc.Invoke(ctx, Chat_GetCompletion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetCompletionChunk(ctx context.Context, in *GetCompletionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetChatCompletionChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Chat_ServiceDesc.Streams[0], Chat_GetCompletionChunk_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetCompletionsRequest, GetChatCompletionChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chat_GetCompletionChunkClient = grpc.ServerStreamingClient[GetChatCompletionChunk]

func (c *chatClient) StartDeferredCompletion(ctx context.Context, in *GetCompletionsRequest, opts ...grpc.CallOption) (*StartDeferredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartDeferredResponse)
	err := c.cc.Invoke(ctx, Chat_StartDeferredCompletion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetDeferredCompletion(ctx context.Context, in *GetDeferredRequest, opts ...grpc.CallOption) (*GetDeferredCompletionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeferredCompletionResponse)
	err := c.cc.Invoke(ctx, Chat_GetDeferredCompletion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
// All implementations should embed UnimplementedChatServer
// for forward compatibility.
//
// An API that exposes our language models via a Chat interface.
type ChatServer interface {
	// Samples a response from the model and blocks until the response has been
	// fully generated.
	GetCompletion(context.Context, *GetCompletionsRequest) (*GetChatCompletionResponse, error)
	// Samples a response from the model and streams out the model tokens as they
	// are being generated.
	GetCompletionChunk(*GetCompletionsRequest, grpc.ServerStreamingServer[GetChatCompletionChunk]) error
	// Starts sampling of the model and immediately returns a response containing
	// a request id. The request id may be used to poll
	// the `GetDeferredCompletion` RPC.
	StartDeferredCompletion(context.Context, *GetCompletionsRequest) (*StartDeferredResponse, error)
	// Gets the result of a deferred completion started by calling `StartDeferredCompletion`.
	GetDeferredCompletion(context.Context, *GetDeferredRequest) (*GetDeferredCompletionResponse, error)
}

// UnimplementedChatServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatServer struct{}

func (UnimplementedChatServer) GetCompletion(context.Context, *GetCompletionsRequest) (*GetChatCompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompletion not implemented")
}
func (UnimplementedChatServer) GetCompletionChunk(*GetCompletionsRequest, grpc.ServerStreamingServer[GetChatCompletionChunk]) error {
	return status.Errorf(codes.Unimplemented, "method GetCompletionChunk not implemented")
}
func (UnimplementedChatServer) StartDeferredCompletion(context.Context, *GetCompletionsRequest) (*StartDeferredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDeferredCompletion not implemented")
}
func (UnimplementedChatServer) GetDeferredCompletion(context.Context, *GetDeferredRequest) (*GetDeferredCompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeferredCompletion not implemented")
}
func (UnimplementedChatServer) testEmbeddedByValue() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	// If the following call pancis, it indicates UnimplementedChatServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_GetCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompletionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_GetCompletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetCompletion(ctx, req.(*GetCompletionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetCompletionChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCompletionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServer).GetCompletionChunk(m, &grpc.GenericServerStream[GetCompletionsRequest, GetChatCompletionChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chat_GetCompletionChunkServer = grpc.ServerStreamingServer[GetChatCompletionChunk]

func _Chat_StartDeferredCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompletionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).StartDeferredCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_StartDeferredCompletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).StartDeferredCompletion(ctx, req.(*GetCompletionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetDeferredCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeferredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetDeferredCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_GetDeferredCompletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetDeferredCompletion(ctx, req.(*GetDeferredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xai_api.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompletion",
			Handler:    _Chat_GetCompletion_Handler,
		},
		{
			MethodName: "StartDeferredCompletion",
			Handler:    _Chat_StartDeferredCompletion_Handler,
		},
		{
			MethodName: "GetDeferredCompletion",
			Handler:    _Chat_GetDeferredCompletion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCompletionChunk",
			Handler:       _Chat_GetCompletionChunk_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "xai/api/v1/chat.proto",
}
