// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: xai/api/v1/chat.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageRole int32

const (
	// Default value / invalid role.
	MessageRole_INVALID_ROLE MessageRole = 0
	// User role.
	MessageRole_ROLE_USER MessageRole = 1
	// Assistant role, normally the response from the model.
	MessageRole_ROLE_ASSISTANT MessageRole = 2
	// System role, typically for system instructions.
	MessageRole_ROLE_SYSTEM MessageRole = 3
	// Indicates a return from a tool call. Deprecated in favor of ROLE_TOOL.
	//
	// Deprecated: Marked as deprecated in xai/api/v1/chat.proto.
	MessageRole_ROLE_FUNCTION MessageRole = 4
	// Indicates a return from a tool call.
	MessageRole_ROLE_TOOL MessageRole = 5
)

// Enum value maps for MessageRole.
var (
	MessageRole_name = map[int32]string{
		0: "INVALID_ROLE",
		1: "ROLE_USER",
		2: "ROLE_ASSISTANT",
		3: "ROLE_SYSTEM",
		4: "ROLE_FUNCTION",
		5: "ROLE_TOOL",
	}
	MessageRole_value = map[string]int32{
		"INVALID_ROLE":   0,
		"ROLE_USER":      1,
		"ROLE_ASSISTANT": 2,
		"ROLE_SYSTEM":    3,
		"ROLE_FUNCTION":  4,
		"ROLE_TOOL":      5,
	}
)

func (x MessageRole) Enum() *MessageRole {
	p := new(MessageRole)
	*p = x
	return p
}

func (x MessageRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageRole) Descriptor() protoreflect.EnumDescriptor {
	return file_xai_api_v1_chat_proto_enumTypes[0].Descriptor()
}

func (MessageRole) Type() protoreflect.EnumType {
	return &file_xai_api_v1_chat_proto_enumTypes[0]
}

func (x MessageRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageRole.Descriptor instead.
func (MessageRole) EnumDescriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{0}
}

type ReasoningEffort int32

const (
	ReasoningEffort_INVALID_EFFORT ReasoningEffort = 0
	ReasoningEffort_EFFORT_LOW     ReasoningEffort = 1
	ReasoningEffort_EFFORT_MEDIUM  ReasoningEffort = 2
	ReasoningEffort_EFFORT_HIGH    ReasoningEffort = 3
)

// Enum value maps for ReasoningEffort.
var (
	ReasoningEffort_name = map[int32]string{
		0: "INVALID_EFFORT",
		1: "EFFORT_LOW",
		2: "EFFORT_MEDIUM",
		3: "EFFORT_HIGH",
	}
	ReasoningEffort_value = map[string]int32{
		"INVALID_EFFORT": 0,
		"EFFORT_LOW":     1,
		"EFFORT_MEDIUM":  2,
		"EFFORT_HIGH":    3,
	}
)

func (x ReasoningEffort) Enum() *ReasoningEffort {
	p := new(ReasoningEffort)
	*p = x
	return p
}

func (x ReasoningEffort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReasoningEffort) Descriptor() protoreflect.EnumDescriptor {
	return file_xai_api_v1_chat_proto_enumTypes[1].Descriptor()
}

func (ReasoningEffort) Type() protoreflect.EnumType {
	return &file_xai_api_v1_chat_proto_enumTypes[1]
}

func (x ReasoningEffort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReasoningEffort.Descriptor instead.
func (ReasoningEffort) EnumDescriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{1}
}

type ToolMode int32

const (
	// Invalid tool mode.
	ToolMode_TOOL_MODE_INVALID ToolMode = 0
	// Let the model decide if a tool shall be used.
	ToolMode_TOOL_MODE_AUTO ToolMode = 1
	// Force the model to not use tools.
	ToolMode_TOOL_MODE_NONE ToolMode = 2
	// Force the model to use tools.
	ToolMode_TOOL_MODE_REQUIRED ToolMode = 3
)

// Enum value maps for ToolMode.
var (
	ToolMode_name = map[int32]string{
		0: "TOOL_MODE_INVALID",
		1: "TOOL_MODE_AUTO",
		2: "TOOL_MODE_NONE",
		3: "TOOL_MODE_REQUIRED",
	}
	ToolMode_value = map[string]int32{
		"TOOL_MODE_INVALID":  0,
		"TOOL_MODE_AUTO":     1,
		"TOOL_MODE_NONE":     2,
		"TOOL_MODE_REQUIRED": 3,
	}
)

func (x ToolMode) Enum() *ToolMode {
	p := new(ToolMode)
	*p = x
	return p
}

func (x ToolMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ToolMode) Descriptor() protoreflect.EnumDescriptor {
	return file_xai_api_v1_chat_proto_enumTypes[2].Descriptor()
}

func (ToolMode) Type() protoreflect.EnumType {
	return &file_xai_api_v1_chat_proto_enumTypes[2]
}

func (x ToolMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ToolMode.Descriptor instead.
func (ToolMode) EnumDescriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{2}
}

type FormatType int32

const (
	// Invalid format type.
	FormatType_FORMAT_TYPE_INVALID FormatType = 0
	// Raw text.
	FormatType_FORMAT_TYPE_TEXT FormatType = 1
	// Any JSON object.
	FormatType_FORMAT_TYPE_JSON_OBJECT FormatType = 2
	// Follow a JSON schema.
	FormatType_FORMAT_TYPE_JSON_SCHEMA FormatType = 3
)

// Enum value maps for FormatType.
var (
	FormatType_name = map[int32]string{
		0: "FORMAT_TYPE_INVALID",
		1: "FORMAT_TYPE_TEXT",
		2: "FORMAT_TYPE_JSON_OBJECT",
		3: "FORMAT_TYPE_JSON_SCHEMA",
	}
	FormatType_value = map[string]int32{
		"FORMAT_TYPE_INVALID":     0,
		"FORMAT_TYPE_TEXT":        1,
		"FORMAT_TYPE_JSON_OBJECT": 2,
		"FORMAT_TYPE_JSON_SCHEMA": 3,
	}
)

func (x FormatType) Enum() *FormatType {
	p := new(FormatType)
	*p = x
	return p
}

func (x FormatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FormatType) Descriptor() protoreflect.EnumDescriptor {
	return file_xai_api_v1_chat_proto_enumTypes[3].Descriptor()
}

func (FormatType) Type() protoreflect.EnumType {
	return &file_xai_api_v1_chat_proto_enumTypes[3]
}

func (x FormatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FormatType.Descriptor instead.
func (FormatType) EnumDescriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{3}
}

// Mode to control the web search.
type SearchMode int32

const (
	SearchMode_INVALID_SEARCH_MODE SearchMode = 0
	SearchMode_OFF_SEARCH_MODE     SearchMode = 1
	SearchMode_ON_SEARCH_MODE      SearchMode = 2
	SearchMode_AUTO_SEARCH_MODE    SearchMode = 3
)

// Enum value maps for SearchMode.
var (
	SearchMode_name = map[int32]string{
		0: "INVALID_SEARCH_MODE",
		1: "OFF_SEARCH_MODE",
		2: "ON_SEARCH_MODE",
		3: "AUTO_SEARCH_MODE",
	}
	SearchMode_value = map[string]int32{
		"INVALID_SEARCH_MODE": 0,
		"OFF_SEARCH_MODE":     1,
		"ON_SEARCH_MODE":      2,
		"AUTO_SEARCH_MODE":    3,
	}
)

func (x SearchMode) Enum() *SearchMode {
	p := new(SearchMode)
	*p = x
	return p
}

func (x SearchMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchMode) Descriptor() protoreflect.EnumDescriptor {
	return file_xai_api_v1_chat_proto_enumTypes[4].Descriptor()
}

func (SearchMode) Type() protoreflect.EnumType {
	return &file_xai_api_v1_chat_proto_enumTypes[4]
}

func (x SearchMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchMode.Descriptor instead.
func (SearchMode) EnumDescriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{4}
}

type GetCompletionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A sequence of messages in the conversation. There must be at least a single
	// message that the model can respond to.
	Messages []*Message `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	// Name of the model. This is the name as reported by the models API. More
	// details can be found on your console at https://console.x.ai.
	Model string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	// An opaque string supplied by the API client (customer) to identify a user.
	// The string will be stored in the logs and can be used in customer service
	// requests to identify certain requests.
	User string `protobuf:"bytes,16,opt,name=user,proto3" json:"user,omitempty"`
	// The number of completions to create concurrently. A single completion will
	// be generated if the parameter is unset. Each completion is charged at the
	// same rate. You can generate at most 128 concurrent completions.
	N *int32 `protobuf:"varint,8,opt,name=n,proto3,oneof" json:"n,omitempty"`
	// The maximum number of tokens to sample. If unset, the model samples until
	// one of the following stop-conditions is reached:
	// - The context length of the model is exceeded
	// - One of the `stop` sequences has been observed.
	// - The time limit exceeds.
	//
	// We recommend choosing a reasonable value to reduce the risk of accidental
	// long-generations that consume many tokens. This included potentially hidden
	// tokens required for reasoning or parsing.
	MaxTokens *int32 `protobuf:"varint,7,opt,name=max_tokens,json=maxTokens,proto3,oneof" json:"max_tokens,omitempty"`
	// A random seed used to make the sampling process deterministic. This is
	// provided in a best-effort basis without guarantee that sampling is 100%
	// deterministic given a seed. This is primarily provided for short-lived
	// testing purposes. Given a fixed request and seed, the answers may change
	// over time as our systems evolve.
	Seed *int32 `protobuf:"varint,11,opt,name=seed,proto3,oneof" json:"seed,omitempty"`
	// String patterns that will cause the sampling procedure to stop prematurely
	// when observed.
	// Note that the completion is based on individual tokens and sampling can
	// only terminate at token boundaries. If a stop string is a substring of an
	// individual token, the completion will include the entire token, which
	// extends beyond the stop string.
	// For example, if `stop = ["wor"]` and we prompt the model with "hello" to
	// which it responds with "world", then the sampling procedure will stop after
	// observing the "world" token and the completion will contain
	// the entire world "world" even though the stop string was just "wor".
	// You can provide at most 8 stop strings.
	Stop []string `protobuf:"bytes,12,rep,name=stop,proto3" json:"stop,omitempty"`
	// A number between 0 and 2 used to control the variance of completions.
	// The smaller the value, the more deterministic the model will become. For
	// example, if we sample 1000 answers to the same prompt at a temperature of
	// 0.001, then most of the 1000 answers will be identical. Conversely, if we
	// conduct the same experiment at a temperature of 2, virtually no two answers
	// will be identical. Note that increasing the temperature will cause
	// the model to hallucinate more strongly.
	Temperature *float32 `protobuf:"fixed32,14,opt,name=temperature,proto3,oneof" json:"temperature,omitempty"`
	// A number between 0 and 1 controlling the likelihood of the model to use
	// less-common answers. Recall that the model produces a probability for
	// each token. This means, for any choice of token there are thousands of
	// possibilities to choose from. This parameter controls the "nucleus sampling
	// algorithm". Instead of considering every possible token at every step, we
	// only look at the K tokens who's probabilities exceed `top_p`.
	// For example, if we set `top_p = 0.9`, then the set of tokens we actually
	// sample from, will have a probability mass of at least 90%. In practice,
	// low values will make the model more deterministic.
	TopP *float32 `protobuf:"fixed32,15,opt,name=top_p,json=topP,proto3,oneof" json:"top_p,omitempty"`
	// If set to true, log probabilities of the sampling are returned.
	Logprobs bool `protobuf:"varint,5,opt,name=logprobs,proto3" json:"logprobs,omitempty"`
	// Number of top log probabilities to return.
	TopLogprobs *int32 `protobuf:"varint,6,opt,name=top_logprobs,json=topLogprobs,proto3,oneof" json:"top_logprobs,omitempty"`
	// A list of tools the model may call. Currently, only functions are supported
	// as a tool. Use this to provide a list of functions the model may generate
	// JSON inputs for.
	Tools []*Tool `protobuf:"bytes,17,rep,name=tools,proto3" json:"tools,omitempty"`
	// Controls if the model can, should, or must not use tools.
	ToolChoice *ToolChoice `protobuf:"bytes,18,opt,name=tool_choice,json=toolChoice,proto3" json:"tool_choice,omitempty"`
	// Formatting constraint on the response.
	ResponseFormat *ResponseFormat `protobuf:"bytes,10,opt,name=response_format,json=responseFormat,proto3" json:"response_format,omitempty"`
	// Positive values penalize new tokens based on their existing frequency in
	// the text so far, decreasing the model's likelihood to repeat the same line
	// verbatim.
	FrequencyPenalty *float32 `protobuf:"fixed32,3,opt,name=frequency_penalty,json=frequencyPenalty,proto3,oneof" json:"frequency_penalty,omitempty"`
	// Positive values penalize new tokens based on whether they appear in
	// the text so far, increasing the model's likelihood to talk about
	// new topics.
	PresencePenalty *float32 `protobuf:"fixed32,9,opt,name=presence_penalty,json=presencePenalty,proto3,oneof" json:"presence_penalty,omitempty"`
	// Constrains effort on reasoning for reasoning models. Default to `EFFORT_MEDIUM`.
	ReasoningEffort *ReasoningEffort `protobuf:"varint,19,opt,name=reasoning_effort,json=reasoningEffort,proto3,enum=xai_api.ReasoningEffort,oneof" json:"reasoning_effort,omitempty"`
	// Set the parameters to be used for realtime data. If not set, no realtime data will be acquired by the model.
	SearchParameters *SearchParameters `protobuf:"bytes,20,opt,name=search_parameters,json=searchParameters,proto3,oneof" json:"search_parameters,omitempty"`
	// / If set to false, the model can perform maximum one tool call per response. Default to true.
	ParallelToolCalls *bool `protobuf:"varint,21,opt,name=parallel_tool_calls,json=parallelToolCalls,proto3,oneof" json:"parallel_tool_calls,omitempty"`
}

func (x *GetCompletionsRequest) Reset() {
	*x = GetCompletionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompletionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompletionsRequest) ProtoMessage() {}

func (x *GetCompletionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompletionsRequest.ProtoReflect.Descriptor instead.
func (*GetCompletionsRequest) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{0}
}

func (x *GetCompletionsRequest) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *GetCompletionsRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *GetCompletionsRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *GetCompletionsRequest) GetN() int32 {
	if x != nil && x.N != nil {
		return *x.N
	}
	return 0
}

func (x *GetCompletionsRequest) GetMaxTokens() int32 {
	if x != nil && x.MaxTokens != nil {
		return *x.MaxTokens
	}
	return 0
}

func (x *GetCompletionsRequest) GetSeed() int32 {
	if x != nil && x.Seed != nil {
		return *x.Seed
	}
	return 0
}

func (x *GetCompletionsRequest) GetStop() []string {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *GetCompletionsRequest) GetTemperature() float32 {
	if x != nil && x.Temperature != nil {
		return *x.Temperature
	}
	return 0
}

func (x *GetCompletionsRequest) GetTopP() float32 {
	if x != nil && x.TopP != nil {
		return *x.TopP
	}
	return 0
}

func (x *GetCompletionsRequest) GetLogprobs() bool {
	if x != nil {
		return x.Logprobs
	}
	return false
}

func (x *GetCompletionsRequest) GetTopLogprobs() int32 {
	if x != nil && x.TopLogprobs != nil {
		return *x.TopLogprobs
	}
	return 0
}

func (x *GetCompletionsRequest) GetTools() []*Tool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *GetCompletionsRequest) GetToolChoice() *ToolChoice {
	if x != nil {
		return x.ToolChoice
	}
	return nil
}

func (x *GetCompletionsRequest) GetResponseFormat() *ResponseFormat {
	if x != nil {
		return x.ResponseFormat
	}
	return nil
}

func (x *GetCompletionsRequest) GetFrequencyPenalty() float32 {
	if x != nil && x.FrequencyPenalty != nil {
		return *x.FrequencyPenalty
	}
	return 0
}

func (x *GetCompletionsRequest) GetPresencePenalty() float32 {
	if x != nil && x.PresencePenalty != nil {
		return *x.PresencePenalty
	}
	return 0
}

func (x *GetCompletionsRequest) GetReasoningEffort() ReasoningEffort {
	if x != nil && x.ReasoningEffort != nil {
		return *x.ReasoningEffort
	}
	return ReasoningEffort_INVALID_EFFORT
}

func (x *GetCompletionsRequest) GetSearchParameters() *SearchParameters {
	if x != nil {
		return x.SearchParameters
	}
	return nil
}

func (x *GetCompletionsRequest) GetParallelToolCalls() bool {
	if x != nil && x.ParallelToolCalls != nil {
		return *x.ParallelToolCalls
	}
	return false
}

type GetChatCompletionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of this request. This ID will also show up on your billing records
	// and you can use it when contacting us regarding a specific request.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Completions in response to the input messages. The number of completions is
	// controlled via the `n` parameter on the request.
	Choices []*Choice `protobuf:"bytes,2,rep,name=choices,proto3" json:"choices,omitempty"`
	// A UNIX timestamp (UTC) indicating when the response object was created.
	// The timestamp is taken when the model starts generating response.
	Created *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	// The name of the model used for the request. This model name contains
	// the actual model name used rather than any aliases.
	// This means the this can be `grok-2-1212` even when the request was
	// specifying `grok-2-latest`.
	Model string `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
	// This fingerprint represents the backend configuration that the model runs
	// with.
	SystemFingerprint string `protobuf:"bytes,7,opt,name=system_fingerprint,json=systemFingerprint,proto3" json:"system_fingerprint,omitempty"`
	// The number of tokens consumed by this request.
	Usage *SamplingUsage `protobuf:"bytes,9,opt,name=usage,proto3" json:"usage,omitempty"`
	// / List of all the external pages (urls) used by the model to produce its final answer.
	// This is only present when live search is enabled, (That is `SearchParameters` have been defined in `GetCompletionsRequest`).
	Citations []string `protobuf:"bytes,10,rep,name=citations,proto3" json:"citations,omitempty"`
}

func (x *GetChatCompletionResponse) Reset() {
	*x = GetChatCompletionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatCompletionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatCompletionResponse) ProtoMessage() {}

func (x *GetChatCompletionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatCompletionResponse.ProtoReflect.Descriptor instead.
func (*GetChatCompletionResponse) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{1}
}

func (x *GetChatCompletionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetChatCompletionResponse) GetChoices() []*Choice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *GetChatCompletionResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *GetChatCompletionResponse) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *GetChatCompletionResponse) GetSystemFingerprint() string {
	if x != nil {
		return x.SystemFingerprint
	}
	return ""
}

func (x *GetChatCompletionResponse) GetUsage() *SamplingUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *GetChatCompletionResponse) GetCitations() []string {
	if x != nil {
		return x.Citations
	}
	return nil
}

type GetChatCompletionChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of this request. This ID will also show up on your billing records
	// and you can use it when contacting us regarding a specific request.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The choices of the model.
	Choices []*ChoiceChunk `protobuf:"bytes,2,rep,name=choices,proto3" json:"choices,omitempty"`
	// A UNIX timestamp (UTC) indicating when the response object was created.
	// The timestamp is taken when the model starts generating response.
	Created *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	// The name of the model used for the request. This model name contains
	// the actual model name used rather than any aliases.
	// This means the this can be `grok-2-1212` even when the request was
	// specifying `grok-2-latest`.
	Model string `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	// This fingerprint represents the backend configuration that the model runs
	// with.
	SystemFingerprint string `protobuf:"bytes,5,opt,name=system_fingerprint,json=systemFingerprint,proto3" json:"system_fingerprint,omitempty"`
	// The total number of tokens consumed when this chunk was streamed. Note that
	// this is not the final number of tokens billed unless this is the last chunk
	// in the stream.
	Usage *SamplingUsage `protobuf:"bytes,6,opt,name=usage,proto3" json:"usage,omitempty"`
	// / List of all the external pages used by the model to answer. Only populated for the last chunk.
	// This is only present when live search is enabled, (That is `SearchParameters` have been defined in `GetCompletionsRequest`).
	Citations []string `protobuf:"bytes,7,rep,name=citations,proto3" json:"citations,omitempty"`
}

func (x *GetChatCompletionChunk) Reset() {
	*x = GetChatCompletionChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatCompletionChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatCompletionChunk) ProtoMessage() {}

func (x *GetChatCompletionChunk) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatCompletionChunk.ProtoReflect.Descriptor instead.
func (*GetChatCompletionChunk) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{2}
}

func (x *GetChatCompletionChunk) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetChatCompletionChunk) GetChoices() []*ChoiceChunk {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *GetChatCompletionChunk) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *GetChatCompletionChunk) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *GetChatCompletionChunk) GetSystemFingerprint() string {
	if x != nil {
		return x.SystemFingerprint
	}
	return ""
}

func (x *GetChatCompletionChunk) GetUsage() *SamplingUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *GetChatCompletionChunk) GetCitations() []string {
	if x != nil {
		return x.Citations
	}
	return nil
}

// Response from GetDeferredCompletion, including the response if the completion
// request has been processed without error.
type GetDeferredCompletionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current status of the request.
	Status DeferredStatus `protobuf:"varint,2,opt,name=status,proto3,enum=xai_api.DeferredStatus" json:"status,omitempty"`
	// Response. Only present if `status=DONE`
	Response *GetChatCompletionResponse `protobuf:"bytes,1,opt,name=response,proto3,oneof" json:"response,omitempty"`
}

func (x *GetDeferredCompletionResponse) Reset() {
	*x = GetDeferredCompletionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeferredCompletionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeferredCompletionResponse) ProtoMessage() {}

func (x *GetDeferredCompletionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeferredCompletionResponse.ProtoReflect.Descriptor instead.
func (*GetDeferredCompletionResponse) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{3}
}

func (x *GetDeferredCompletionResponse) GetStatus() DeferredStatus {
	if x != nil {
		return x.Status
	}
	return DeferredStatus_INVALID_DEFERRED_STATUS
}

func (x *GetDeferredCompletionResponse) GetResponse() *GetChatCompletionResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

// Contains the response generated by the model.
type Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicating why the model stopped sampling.
	FinishReason FinishReason `protobuf:"varint,1,opt,name=finish_reason,json=finishReason,proto3,enum=xai_api.FinishReason" json:"finish_reason,omitempty"`
	// The index of this choice in the list of choices. If you set `n > 1` on your
	// request, you will receive most than one choice in your response.
	Index int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	// The actual message generated by the model.
	Message *CompletionMessage `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// The log probabilities of the sampling.
	Logprobs *LogProbs `protobuf:"bytes,4,opt,name=logprobs,proto3" json:"logprobs,omitempty"`
}

func (x *Choice) Reset() {
	*x = Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Choice) ProtoMessage() {}

func (x *Choice) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Choice.ProtoReflect.Descriptor instead.
func (*Choice) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{4}
}

func (x *Choice) GetFinishReason() FinishReason {
	if x != nil {
		return x.FinishReason
	}
	return FinishReason_REASON_INVALID
}

func (x *Choice) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Choice) GetMessage() *CompletionMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Choice) GetLogprobs() *LogProbs {
	if x != nil {
		return x.Logprobs
	}
	return nil
}

// Holds the model output (i.e. the result of the sampling process).
type CompletionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The generated text based on the input prompt.
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// Reasoning trace the model produced before issuing the final answer.
	ReasoningContent string `protobuf:"bytes,4,opt,name=reasoning_content,json=reasoningContent,proto3" json:"reasoning_content,omitempty"`
	// The role of the message author. Will always default to "assistant".
	Role MessageRole `protobuf:"varint,2,opt,name=role,proto3,enum=xai_api.MessageRole" json:"role,omitempty"`
	// The tools that the assistant wants to call.
	ToolCalls []*ToolCall `protobuf:"bytes,3,rep,name=tool_calls,json=toolCalls,proto3" json:"tool_calls,omitempty"`
}

func (x *CompletionMessage) Reset() {
	*x = CompletionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionMessage) ProtoMessage() {}

func (x *CompletionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionMessage.ProtoReflect.Descriptor instead.
func (*CompletionMessage) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{5}
}

func (x *CompletionMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CompletionMessage) GetReasoningContent() string {
	if x != nil {
		return x.ReasoningContent
	}
	return ""
}

func (x *CompletionMessage) GetRole() MessageRole {
	if x != nil {
		return x.Role
	}
	return MessageRole_INVALID_ROLE
}

func (x *CompletionMessage) GetToolCalls() []*ToolCall {
	if x != nil {
		return x.ToolCalls
	}
	return nil
}

// Holds the differences (deltas) that when concatenated make up the entire
// agent response.
type ChoiceChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The actual text differences that need to be accumulated on the client.
	Delta *Delta `protobuf:"bytes,1,opt,name=delta,proto3" json:"delta,omitempty"`
	// The log probability of the choice.
	Logprobs *LogProbs `protobuf:"bytes,2,opt,name=logprobs,proto3" json:"logprobs,omitempty"`
	// Indicating why the model stopped sampling.
	FinishReason FinishReason `protobuf:"varint,3,opt,name=finish_reason,json=finishReason,proto3,enum=xai_api.FinishReason" json:"finish_reason,omitempty"`
	// The index of this choice in the list of choices. If you set `n > 1` on your
	// request, you will receive most than one choice in your response.
	Index int32 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *ChoiceChunk) Reset() {
	*x = ChoiceChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChoiceChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChoiceChunk) ProtoMessage() {}

func (x *ChoiceChunk) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChoiceChunk.ProtoReflect.Descriptor instead.
func (*ChoiceChunk) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{6}
}

func (x *ChoiceChunk) GetDelta() *Delta {
	if x != nil {
		return x.Delta
	}
	return nil
}

func (x *ChoiceChunk) GetLogprobs() *LogProbs {
	if x != nil {
		return x.Logprobs
	}
	return nil
}

func (x *ChoiceChunk) GetFinishReason() FinishReason {
	if x != nil {
		return x.FinishReason
	}
	return FinishReason_REASON_INVALID
}

func (x *ChoiceChunk) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// The delta of a streaming response.
type Delta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The main model output/answer.
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// Part of the model's reasoning trace.
	ReasoningContent string `protobuf:"bytes,4,opt,name=reasoning_content,json=reasoningContent,proto3" json:"reasoning_content,omitempty"`
	// The entity type who sent the message. For example, a message can be sent by
	// a user or the assistant.
	Role MessageRole `protobuf:"varint,2,opt,name=role,proto3,enum=xai_api.MessageRole" json:"role,omitempty"`
	// A list of tool calls if tool call is requested by the model.
	ToolCalls []*ToolCall `protobuf:"bytes,3,rep,name=tool_calls,json=toolCalls,proto3" json:"tool_calls,omitempty"`
}

func (x *Delta) Reset() {
	*x = Delta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Delta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delta) ProtoMessage() {}

func (x *Delta) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delta.ProtoReflect.Descriptor instead.
func (*Delta) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{7}
}

func (x *Delta) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Delta) GetReasoningContent() string {
	if x != nil {
		return x.ReasoningContent
	}
	return ""
}

func (x *Delta) GetRole() MessageRole {
	if x != nil {
		return x.Role
	}
	return MessageRole_INVALID_ROLE
}

func (x *Delta) GetToolCalls() []*ToolCall {
	if x != nil {
		return x.ToolCalls
	}
	return nil
}

// Holding the log probabilities of the sampling.
type LogProbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of log probability entries, each corresponding to a sampled token
	// and its associated data.
	Content []*LogProb `protobuf:"bytes,1,rep,name=content,proto3" json:"content,omitempty"`
}

func (x *LogProbs) Reset() {
	*x = LogProbs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogProbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogProbs) ProtoMessage() {}

func (x *LogProbs) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogProbs.ProtoReflect.Descriptor instead.
func (*LogProbs) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{8}
}

func (x *LogProbs) GetContent() []*LogProb {
	if x != nil {
		return x.Content
	}
	return nil
}

// Represents the logarithmic probability and metadata for a single sampled
// token.
type LogProb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The text representation of the sampled token.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// The logarithmic probability of this token being sampled, given the prior
	// context.
	Logprob float32 `protobuf:"fixed32,2,opt,name=logprob,proto3" json:"logprob,omitempty"`
	// The raw byte representation of the token, useful for handling non-text or
	// encoded data.
	Bytes []byte `protobuf:"bytes,3,opt,name=bytes,proto3" json:"bytes,omitempty"`
	// A list of the top alternative tokens and their log probabilities at this
	// sampling step.
	TopLogprobs []*TopLogProb `protobuf:"bytes,4,rep,name=top_logprobs,json=topLogprobs,proto3" json:"top_logprobs,omitempty"`
}

func (x *LogProb) Reset() {
	*x = LogProb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogProb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogProb) ProtoMessage() {}

func (x *LogProb) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogProb.ProtoReflect.Descriptor instead.
func (*LogProb) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{9}
}

func (x *LogProb) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LogProb) GetLogprob() float32 {
	if x != nil {
		return x.Logprob
	}
	return 0
}

func (x *LogProb) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *LogProb) GetTopLogprobs() []*TopLogProb {
	if x != nil {
		return x.TopLogprobs
	}
	return nil
}

// Represents an alternative token and its log probability among the top
// candidates.
type TopLogProb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The text representation of an alternative token considered by the model.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// The logarithmic probability of this alternative token being sampled.
	Logprob float32 `protobuf:"fixed32,2,opt,name=logprob,proto3" json:"logprob,omitempty"`
	// The raw byte representation of the alternative token.
	Bytes []byte `protobuf:"bytes,3,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *TopLogProb) Reset() {
	*x = TopLogProb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopLogProb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopLogProb) ProtoMessage() {}

func (x *TopLogProb) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopLogProb.ProtoReflect.Descriptor instead.
func (*TopLogProb) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{10}
}

func (x *TopLogProb) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TopLogProb) GetLogprob() float32 {
	if x != nil {
		return x.Logprob
	}
	return 0
}

func (x *TopLogProb) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

// Holds a single content element that is part of an input message.
type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*Content_Text
	//	*Content_ImageUrl
	Content isContent_Content `protobuf_oneof:"content"`
}

func (x *Content) Reset() {
	*x = Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{11}
}

func (m *Content) GetContent() isContent_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Content) GetText() string {
	if x, ok := x.GetContent().(*Content_Text); ok {
		return x.Text
	}
	return ""
}

func (x *Content) GetImageUrl() *ImageUrlContent {
	if x, ok := x.GetContent().(*Content_ImageUrl); ok {
		return x.ImageUrl
	}
	return nil
}

type isContent_Content interface {
	isContent_Content()
}

type Content_Text struct {
	// The content is a pure text message.
	Text string `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type Content_ImageUrl struct {
	// The content is a single image.
	ImageUrl *ImageUrlContent `protobuf:"bytes,2,opt,name=image_url,json=imageUrl,proto3,oneof"`
}

func (*Content_Text) isContent_Content() {}

func (*Content_ImageUrl) isContent_Content() {}

// A message in a conversation. This message is part of the model input. Each
// message originates from a "role", which indicates the entity type who sent
// the message. Messages can contain multiple content elements such as text and
// images.
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The content of the message. Some model support multi-modal message contents
	// that consist of text and images. At least one content element must be set
	// for each message.
	Content []*Content `protobuf:"bytes,1,rep,name=content,proto3" json:"content,omitempty"`
	// Reasoning trace the model produced before issuing the final answer.
	ReasoningContent *string `protobuf:"bytes,5,opt,name=reasoning_content,json=reasoningContent,proto3,oneof" json:"reasoning_content,omitempty"`
	// The entity type who sent the message. For example, a message can be sent by
	// a user or the assistant.
	Role MessageRole `protobuf:"varint,2,opt,name=role,proto3,enum=xai_api.MessageRole" json:"role,omitempty"`
	// The name of the entity who sent the message. The name can only be set if
	// the role is ROLE_USER.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The tools that the assistant wants to call.
	ToolCalls []*ToolCall `protobuf:"bytes,4,rep,name=tool_calls,json=toolCalls,proto3" json:"tool_calls,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{12}
}

func (x *Message) GetContent() []*Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Message) GetReasoningContent() string {
	if x != nil && x.ReasoningContent != nil {
		return *x.ReasoningContent
	}
	return ""
}

func (x *Message) GetRole() MessageRole {
	if x != nil {
		return x.Role
	}
	return MessageRole_INVALID_ROLE
}

func (x *Message) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Message) GetToolCalls() []*ToolCall {
	if x != nil {
		return x.ToolCalls
	}
	return nil
}

type ToolChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ToolChoice:
	//
	//	*ToolChoice_Mode
	//	*ToolChoice_FunctionName
	ToolChoice isToolChoice_ToolChoice `protobuf_oneof:"tool_choice"`
}

func (x *ToolChoice) Reset() {
	*x = ToolChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolChoice) ProtoMessage() {}

func (x *ToolChoice) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolChoice.ProtoReflect.Descriptor instead.
func (*ToolChoice) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{13}
}

func (m *ToolChoice) GetToolChoice() isToolChoice_ToolChoice {
	if m != nil {
		return m.ToolChoice
	}
	return nil
}

func (x *ToolChoice) GetMode() ToolMode {
	if x, ok := x.GetToolChoice().(*ToolChoice_Mode); ok {
		return x.Mode
	}
	return ToolMode_TOOL_MODE_INVALID
}

func (x *ToolChoice) GetFunctionName() string {
	if x, ok := x.GetToolChoice().(*ToolChoice_FunctionName); ok {
		return x.FunctionName
	}
	return ""
}

type isToolChoice_ToolChoice interface {
	isToolChoice_ToolChoice()
}

type ToolChoice_Mode struct {
	// Force the model to perform in a given mode.
	Mode ToolMode `protobuf:"varint,1,opt,name=mode,proto3,enum=xai_api.ToolMode,oneof"`
}

type ToolChoice_FunctionName struct {
	// Force the model to call a particular function.
	FunctionName string `protobuf:"bytes,2,opt,name=function_name,json=functionName,proto3,oneof"`
}

func (*ToolChoice_Mode) isToolChoice_ToolChoice() {}

func (*ToolChoice_FunctionName) isToolChoice_ToolChoice() {}

type Tool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Tool:
	//
	//	*Tool_Function
	Tool isTool_Tool `protobuf_oneof:"tool"`
}

func (x *Tool) Reset() {
	*x = Tool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tool) ProtoMessage() {}

func (x *Tool) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tool.ProtoReflect.Descriptor instead.
func (*Tool) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{14}
}

func (m *Tool) GetTool() isTool_Tool {
	if m != nil {
		return m.Tool
	}
	return nil
}

func (x *Tool) GetFunction() *Function {
	if x, ok := x.GetTool().(*Tool_Function); ok {
		return x.Function
	}
	return nil
}

type isTool_Tool interface {
	isTool_Tool()
}

type Tool_Function struct {
	// Only functions are supported for now
	Function *Function `protobuf:"bytes,1,opt,name=function,proto3,oneof"`
}

func (*Tool_Function) isTool_Tool() {}

type Function struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the function.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the function.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Not supported: Only kept for compatibility reasons.
	Strict bool `protobuf:"varint,3,opt,name=strict,proto3" json:"strict,omitempty"`
	// The parameters the functions accepts, described as a JSON Schema object.
	Parameters string `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *Function) Reset() {
	*x = Function{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Function) ProtoMessage() {}

func (x *Function) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Function.ProtoReflect.Descriptor instead.
func (*Function) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{15}
}

func (x *Function) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Function) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Function) GetStrict() bool {
	if x != nil {
		return x.Strict
	}
	return false
}

func (x *Function) GetParameters() string {
	if x != nil {
		return x.Parameters
	}
	return ""
}

// Content of a tool call, typically in a response from model.
type ToolCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the tool call.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Information regarding invoking the tool call.
	//
	// Types that are assignable to Tool:
	//
	//	*ToolCall_Function
	Tool isToolCall_Tool `protobuf_oneof:"tool"`
}

func (x *ToolCall) Reset() {
	*x = ToolCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolCall) ProtoMessage() {}

func (x *ToolCall) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolCall.ProtoReflect.Descriptor instead.
func (*ToolCall) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{16}
}

func (x *ToolCall) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *ToolCall) GetTool() isToolCall_Tool {
	if m != nil {
		return m.Tool
	}
	return nil
}

func (x *ToolCall) GetFunction() *FunctionCall {
	if x, ok := x.GetTool().(*ToolCall_Function); ok {
		return x.Function
	}
	return nil
}

type isToolCall_Tool interface {
	isToolCall_Tool()
}

type ToolCall_Function struct {
	Function *FunctionCall `protobuf:"bytes,10,opt,name=function,proto3,oneof"`
}

func (*ToolCall_Function) isToolCall_Tool() {}

// Tool call information.
type FunctionCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the function to call.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Arguments used to call the function as json string.
	Arguments string `protobuf:"bytes,2,opt,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *FunctionCall) Reset() {
	*x = FunctionCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCall) ProtoMessage() {}

func (x *FunctionCall) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCall.ProtoReflect.Descriptor instead.
func (*FunctionCall) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{17}
}

func (x *FunctionCall) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionCall) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

// The response format for structured response.
type ResponseFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of format expected for the response. Default to `FORMAT_TYPE_TEXT`
	FormatType FormatType `protobuf:"varint,1,opt,name=format_type,json=formatType,proto3,enum=xai_api.FormatType" json:"format_type,omitempty"`
	// The JSON schema that the response should conform to.
	// Only considered if `format_type` is `FORMAT_TYPE_JSON_SCHEMA`.
	Schema *string `protobuf:"bytes,2,opt,name=schema,proto3,oneof" json:"schema,omitempty"`
}

func (x *ResponseFormat) Reset() {
	*x = ResponseFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFormat) ProtoMessage() {}

func (x *ResponseFormat) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFormat.ProtoReflect.Descriptor instead.
func (*ResponseFormat) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{18}
}

func (x *ResponseFormat) GetFormatType() FormatType {
	if x != nil {
		return x.FormatType
	}
	return FormatType_FORMAT_TYPE_INVALID
}

func (x *ResponseFormat) GetSchema() string {
	if x != nil && x.Schema != nil {
		return *x.Schema
	}
	return ""
}

// Parameters for configuring search behavior in a chat request.
//
// This message allows customization of search functionality when using models that support
// searching external sources for information. You can specify which sources to search,
// set date ranges for relevant content, control the search mode, and configure how
// results are returned.
type SearchParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Controls when search is performed. Possible values are:
	//   - OFF_SEARCH_MODE (default): No search is performed, and no external data will be considered.
	//   - ON_SEARCH_MODE: Search is always performed when sampling from the model and the model will search in every source provided for relevant data.
	//   - AUTO_SEARCH_MODE: The model decides whether to perform a search based on the prompt and which sources to use.
	Mode SearchMode `protobuf:"varint,1,opt,name=mode,proto3,enum=xai_api.SearchMode" json:"mode,omitempty"`
	// A list of search sources to query, such as web, news, X, or RSS feeds.
	// Multiple sources can be specified. If no sources are provided, the model will default to
	// searching the web and X.
	Sources []*Source `protobuf:"bytes,9,rep,name=sources,proto3" json:"sources,omitempty"`
	// Optional start date for search results in ISO-8601 YYYY-MM-DD format (e.g., "2024-05-24").
	// Only content after this date will be considered. Defaults to unset (no start date restriction).
	// See https://en.wikipedia.org/wiki/ISO_8601 for format details.
	FromDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	// Optional end date for search results in ISO-8601 YYYY-MM-DD format (e.g., "2024-12-24").
	// Only content before this date will be considered. Defaults to unset (no end date restriction).
	// See https://en.wikipedia.org/wiki/ISO_8601 for format details.
	ToDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
	// If set to true, the model will return a list of citations (URLs or references)
	// to the sources used in generating the response. Defaults to true.
	ReturnCitations bool `protobuf:"varint,7,opt,name=return_citations,json=returnCitations,proto3" json:"return_citations,omitempty"`
	// Optional limit on the number of search results to consider
	// when generating a response. Must be in the range [1, 30]. Defaults to 15.
	MaxSearchResults *int32 `protobuf:"varint,8,opt,name=max_search_results,json=maxSearchResults,proto3,oneof" json:"max_search_results,omitempty"`
}

func (x *SearchParameters) Reset() {
	*x = SearchParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchParameters) ProtoMessage() {}

func (x *SearchParameters) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchParameters.ProtoReflect.Descriptor instead.
func (*SearchParameters) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{19}
}

func (x *SearchParameters) GetMode() SearchMode {
	if x != nil {
		return x.Mode
	}
	return SearchMode_INVALID_SEARCH_MODE
}

func (x *SearchParameters) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *SearchParameters) GetFromDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *SearchParameters) GetToDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

func (x *SearchParameters) GetReturnCitations() bool {
	if x != nil {
		return x.ReturnCitations
	}
	return false
}

func (x *SearchParameters) GetMaxSearchResults() int32 {
	if x != nil && x.MaxSearchResults != nil {
		return *x.MaxSearchResults
	}
	return 0
}

// Defines a source for search requests, specifying the type of content to search.
// This message acts as a container for different types of search sources. Only one type
// of source can be specified per instance using the oneof field.
type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//
	//	*Source_Web
	//	*Source_News
	//	*Source_X
	//	*Source_Rss
	Source isSource_Source `protobuf_oneof:"source"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{20}
}

func (m *Source) GetSource() isSource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *Source) GetWeb() *WebSource {
	if x, ok := x.GetSource().(*Source_Web); ok {
		return x.Web
	}
	return nil
}

func (x *Source) GetNews() *NewsSource {
	if x, ok := x.GetSource().(*Source_News); ok {
		return x.News
	}
	return nil
}

func (x *Source) GetX() *XSource {
	if x, ok := x.GetSource().(*Source_X); ok {
		return x.X
	}
	return nil
}

func (x *Source) GetRss() *RssSource {
	if x, ok := x.GetSource().(*Source_Rss); ok {
		return x.Rss
	}
	return nil
}

type isSource_Source interface {
	isSource_Source()
}

type Source_Web struct {
	// Configuration for searching online web content. Use this to search general websites
	// with options to filter by country, exclude specific domains, or only allow specific domains.
	Web *WebSource `protobuf:"bytes,1,opt,name=web,proto3,oneof"`
}

type Source_News struct {
	// Configuration for searching recent articles and reports from news outlets.
	// Useful for current events or topic-specific updates.
	News *NewsSource `protobuf:"bytes,2,opt,name=news,proto3,oneof"`
}

type Source_X struct {
	// Configuration for searching content on X. Allows focusing on
	// specific user handles for targeted content.
	X *XSource `protobuf:"bytes,3,opt,name=x,proto3,oneof"`
}

type Source_Rss struct {
	// Configuration for searching content from RSS feeds. Requires specific feed URLs
	// to query.
	Rss *RssSource `protobuf:"bytes,4,opt,name=rss,proto3,oneof"`
}

func (*Source_Web) isSource_Source() {}

func (*Source_News) isSource_Source() {}

func (*Source_X) isSource_Source() {}

func (*Source_Rss) isSource_Source() {}

// Configuration for a web search source in search requests.
//
// This message configures a source for searching online web content. It allows specification
// of regional content through country codes and filtering of results by excluding or allowing
// specific websites.
type WebSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of website domains (without protocol specification or subdomains) to exclude from search results (e.g., ["example.com"]).
	// Use this to prevent results from unwanted sites. A maximum of 5 websites can be excluded.
	// This parameter cannot be set together with `allowed_websites`.
	ExcludedWebsites []string `protobuf:"bytes,2,rep,name=excluded_websites,json=excludedWebsites,proto3" json:"excluded_websites,omitempty"`
	// List of website domains (without protocol specification or subdomains)
	// to restrict search results to (e.g., ["example.com"]). A maximum of 5 websites can be allowed.
	// Use this as a whitelist to limit results to only these specific sites; no other websites will
	// be considered. If no relevant information is found on these websites, the number of results
	// returned might be smaller than `max_search_results` set in `SearchParameters`. Note: This
	// parameter cannot be set together with `excluded_websites`.
	AllowedWebsites []string `protobuf:"bytes,5,rep,name=allowed_websites,json=allowedWebsites,proto3" json:"allowed_websites,omitempty"`
	// Optional ISO alpha-2 country code (e.g., "BE" for Belgium) to limit search results
	// to content from a specific region or country. Defaults to unset (global search).
	// See https://en.wikipedia.org/wiki/ISO_3166-2 for valid codes.
	Country *string `protobuf:"bytes,3,opt,name=country,proto3,oneof" json:"country,omitempty"`
	// Whether to exclude adult content from the search results. Defaults to true.
	SafeSearch bool `protobuf:"varint,4,opt,name=safe_search,json=safeSearch,proto3" json:"safe_search,omitempty"`
}

func (x *WebSource) Reset() {
	*x = WebSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebSource) ProtoMessage() {}

func (x *WebSource) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebSource.ProtoReflect.Descriptor instead.
func (*WebSource) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{21}
}

func (x *WebSource) GetExcludedWebsites() []string {
	if x != nil {
		return x.ExcludedWebsites
	}
	return nil
}

func (x *WebSource) GetAllowedWebsites() []string {
	if x != nil {
		return x.AllowedWebsites
	}
	return nil
}

func (x *WebSource) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *WebSource) GetSafeSearch() bool {
	if x != nil {
		return x.SafeSearch
	}
	return false
}

// Configuration for a news search source in search requests.
//
// This message configures a source for searching recent articles and reports from news outlets.
// It is useful for obtaining current events or topic-specific updates with regional filtering.
type NewsSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of website domains (without protocol specification or subdomains)
	// to exclude from search results (e.g., ["example.com"]). A maximum of 5 websites can be excluded.
	// Use this to prevent results from specific news sites. Defaults to unset (no exclusions).
	ExcludedWebsites []string `protobuf:"bytes,2,rep,name=excluded_websites,json=excludedWebsites,proto3" json:"excluded_websites,omitempty"`
	// Optional ISO alpha-2 country code (e.g., "BE" for Belgium) to limit search results
	// to news from a specific region or country. Defaults to unset (global news).
	// See https://en.wikipedia.org/wiki/ISO_3166-2 for valid codes.
	Country *string `protobuf:"bytes,3,opt,name=country,proto3,oneof" json:"country,omitempty"`
	// Whether to exclude adult content from the search results. Defaults to true.
	SafeSearch bool `protobuf:"varint,4,opt,name=safe_search,json=safeSearch,proto3" json:"safe_search,omitempty"`
}

func (x *NewsSource) Reset() {
	*x = NewsSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsSource) ProtoMessage() {}

func (x *NewsSource) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsSource.ProtoReflect.Descriptor instead.
func (*NewsSource) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{22}
}

func (x *NewsSource) GetExcludedWebsites() []string {
	if x != nil {
		return x.ExcludedWebsites
	}
	return nil
}

func (x *NewsSource) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *NewsSource) GetSafeSearch() bool {
	if x != nil {
		return x.SafeSearch
	}
	return false
}

// Configuration for an X (formerly Twitter) search source in search requests.
//
// This message configures a source for searching content on X. It allows focusing the search
// on specific user handles to retrieve targeted posts and interactions.
type XSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional list of X usernames (without the '@' symbol) to limit search results to posts
	// from specific accounts (e.g., ["xai"]). If set, only posts authored by these
	// handles will be considered in the live search.
	// This field can not be set together with `excluded_x_handles`.
	// Defaults to unset (no exclusions).
	IncludedXHandles []string `protobuf:"bytes,7,rep,name=included_x_handles,json=includedXHandles,proto3" json:"included_x_handles,omitempty"`
	// Optional list of X usernames (without the '@' symbol) used to exclude posts from specific accounts.
	// If set, posts authored by these handles will be excluded from the live search results.
	// This field can not be set together with `included_x_handles`.
	// Defaults to unset (no exclusions).
	ExcludedXHandles []string `protobuf:"bytes,8,rep,name=excluded_x_handles,json=excludedXHandles,proto3" json:"excluded_x_handles,omitempty"`
	// Optional post favorite count threshold. Defaults to unset (don't filter posts by post favorite count).
	// If set, only posts with a favorite count greater than or equal to this threshold will be considered.
	PostFavoriteCount *int32 `protobuf:"varint,9,opt,name=post_favorite_count,json=postFavoriteCount,proto3,oneof" json:"post_favorite_count,omitempty"`
	// Optional post view count threshold. Defaults to unset (don't filter posts by post view count).
	// If set, only posts with a view count greater than or equal to this threshold will be considered.
	PostViewCount *int32 `protobuf:"varint,10,opt,name=post_view_count,json=postViewCount,proto3,oneof" json:"post_view_count,omitempty"`
}

func (x *XSource) Reset() {
	*x = XSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XSource) ProtoMessage() {}

func (x *XSource) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XSource.ProtoReflect.Descriptor instead.
func (*XSource) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{23}
}

func (x *XSource) GetIncludedXHandles() []string {
	if x != nil {
		return x.IncludedXHandles
	}
	return nil
}

func (x *XSource) GetExcludedXHandles() []string {
	if x != nil {
		return x.ExcludedXHandles
	}
	return nil
}

func (x *XSource) GetPostFavoriteCount() int32 {
	if x != nil && x.PostFavoriteCount != nil {
		return *x.PostFavoriteCount
	}
	return 0
}

func (x *XSource) GetPostViewCount() int32 {
	if x != nil && x.PostViewCount != nil {
		return *x.PostViewCount
	}
	return 0
}

// Configuration for an RSS search source in search requests.
//
// This message configures a source for searching content from RSS feeds. It requires specific
// feed URLs to query for content updates.
type RssSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of RSS feed URLs to search. Each URL must point to a valid RSS feed.
	// At least one link must be provided.
	Links []string `protobuf:"bytes,1,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *RssSource) Reset() {
	*x = RssSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xai_api_v1_chat_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RssSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RssSource) ProtoMessage() {}

func (x *RssSource) ProtoReflect() protoreflect.Message {
	mi := &file_xai_api_v1_chat_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RssSource.ProtoReflect.Descriptor instead.
func (*RssSource) Descriptor() ([]byte, []int) {
	return file_xai_api_v1_chat_proto_rawDescGZIP(), []int{24}
}

func (x *RssSource) GetLinks() []string {
	if x != nil {
		return x.Links
	}
	return nil
}

var File_xai_api_v1_chat_proto protoreflect.FileDescriptor

var file_xai_api_v1_chat_proto_rawDesc = []byte{
	0x0a, 0x15, 0x78, 0x61, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x78, 0x61, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x78, 0x61,
	0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x78, 0x61, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x78,
	0x61, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x07, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x11, 0x0a, 0x01, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x01, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61,
	0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x09, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04,
	0x73, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x25, 0x0a, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x03, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x04, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x50, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x5f,
	0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05,
	0x52, 0x0b, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x05,
	0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x61, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x30, 0x0a,
	0x11, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x10, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x07, 0x52, 0x0f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x48, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x66, 0x66,
	0x6f, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x78, 0x61, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x66, 0x66,
	0x6f, 0x72, 0x74, 0x48, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x45, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x11, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48,
	0x09, 0x52, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x11, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x54,
	0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x04, 0x0a, 0x02, 0x5f,
	0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f,
	0x70, 0x5f, 0x70, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x70,
	0x72, 0x6f, 0x62, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x66,
	0x66, 0x6f, 0x72, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x9d, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2d, 0x0a,
	0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x05,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x61,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9f, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x2d, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x78,
	0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xbf, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x73, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62,
	0x73, 0x22, 0xb6, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x78,
	0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x74, 0x6f, 0x6f, 0x6c,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78,
	0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x0b, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x05, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x78, 0x61, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67,
	0x50, 0x72, 0x6f, 0x62, 0x73, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x12,
	0x3a, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0c, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0xaa, 0x01, 0x0a, 0x05, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x0a,
	0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x22, 0x36,
	0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x61,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x50, 0x72,
	0x6f, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x70,
	0x72, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x70, 0x72,
	0x6f, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x5f,
	0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x50,
	0x72, 0x6f, 0x62, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73,
	0x22, 0x52, 0x0a, 0x0a, 0x54, 0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x42, 0x09,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xed, 0x01, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x6b, 0x0a, 0x0a, 0x54, 0x6f, 0x6f,
	0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x54, 0x6f, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x25, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x3f, 0x0a, 0x04, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x2f,
	0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x6f, 0x6f, 0x6c, 0x22, 0x78, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x57, 0x0a, 0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a,
	0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x6f, 0x6f, 0x6c, 0x22, 0x40, 0x0a, 0x0c, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x6e, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x34,
	0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xc9, 0x02, 0x0a,
	0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x78, 0x61,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x33,
	0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x74, 0x6f, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31,
	0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x61,
	0x78, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x06, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x77, 0x65, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x03, 0x77, 0x65, 0x62, 0x12, 0x29, 0x0a, 0x04, 0x6e,
	0x65, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x61, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x65, 0x77, 0x73, 0x12, 0x20, 0x0a, 0x01, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x58, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x01, 0x78, 0x12, 0x26, 0x0a, 0x03, 0x72, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x73, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x03, 0x72, 0x73, 0x73,
	0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x09, 0x57,
	0x65, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x57, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x61, 0x66, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x85, 0x01, 0x0a,
	0x0a, 0x4e, 0x65, 0x77, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x66, 0x65, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x61,
	0x66, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x22, 0xf9, 0x01, 0x0a, 0x07, 0x58, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x78, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x58, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x78, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x58, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x13,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x11, 0x70, 0x6f, 0x73,
	0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0d, 0x70, 0x6f,
	0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07,
	0x22, 0x21, 0x0a, 0x09, 0x52, 0x73, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x2a, 0x79, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x4f,
	0x4c, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49,
	0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x0d, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x10, 0x05, 0x2a, 0x59,
	0x0a, 0x0f, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x66, 0x66, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x46, 0x46,
	0x4f, 0x52, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x46, 0x46, 0x4f, 0x52, 0x54, 0x5f,
	0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x46, 0x46, 0x4f, 0x52, 0x54, 0x5f,
	0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x46, 0x46, 0x4f,
	0x52, 0x54, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x2a, 0x61, 0x0a, 0x08, 0x54, 0x6f, 0x6f,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x75, 0x0a, 0x0a,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d,
	0x41, 0x10, 0x03, 0x2a, 0x64, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x41,
	0x52, 0x43, 0x48, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x46,
	0x46, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x32, 0xf5, 0x02, 0x0a, 0x04, 0x43, 0x68,
	0x61, 0x74, 0x12, 0x55, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12,
	0x1e, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x5b, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x78, 0x61, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x50, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x42, 0x09, 0x43, 0x68, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0xa2, 0x02, 0x03,
	0x58, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x58, 0x61, 0x69, 0x41, 0x70, 0x69, 0xca, 0x02, 0x06, 0x58,
	0x61, 0x69, 0x41, 0x70, 0x69, 0xe2, 0x02, 0x12, 0x58, 0x61, 0x69, 0x41, 0x70, 0x69, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x06, 0x58, 0x61, 0x69,
	0x41, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_xai_api_v1_chat_proto_rawDescOnce sync.Once
	file_xai_api_v1_chat_proto_rawDescData = file_xai_api_v1_chat_proto_rawDesc
)

func file_xai_api_v1_chat_proto_rawDescGZIP() []byte {
	file_xai_api_v1_chat_proto_rawDescOnce.Do(func() {
		file_xai_api_v1_chat_proto_rawDescData = protoimpl.X.CompressGZIP(file_xai_api_v1_chat_proto_rawDescData)
	})
	return file_xai_api_v1_chat_proto_rawDescData
}

var file_xai_api_v1_chat_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_xai_api_v1_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_xai_api_v1_chat_proto_goTypes = []any{
	(MessageRole)(0),                      // 0: xai_api.MessageRole
	(ReasoningEffort)(0),                  // 1: xai_api.ReasoningEffort
	(ToolMode)(0),                         // 2: xai_api.ToolMode
	(FormatType)(0),                       // 3: xai_api.FormatType
	(SearchMode)(0),                       // 4: xai_api.SearchMode
	(*GetCompletionsRequest)(nil),         // 5: xai_api.GetCompletionsRequest
	(*GetChatCompletionResponse)(nil),     // 6: xai_api.GetChatCompletionResponse
	(*GetChatCompletionChunk)(nil),        // 7: xai_api.GetChatCompletionChunk
	(*GetDeferredCompletionResponse)(nil), // 8: xai_api.GetDeferredCompletionResponse
	(*Choice)(nil),                        // 9: xai_api.Choice
	(*CompletionMessage)(nil),             // 10: xai_api.CompletionMessage
	(*ChoiceChunk)(nil),                   // 11: xai_api.ChoiceChunk
	(*Delta)(nil),                         // 12: xai_api.Delta
	(*LogProbs)(nil),                      // 13: xai_api.LogProbs
	(*LogProb)(nil),                       // 14: xai_api.LogProb
	(*TopLogProb)(nil),                    // 15: xai_api.TopLogProb
	(*Content)(nil),                       // 16: xai_api.Content
	(*Message)(nil),                       // 17: xai_api.Message
	(*ToolChoice)(nil),                    // 18: xai_api.ToolChoice
	(*Tool)(nil),                          // 19: xai_api.Tool
	(*Function)(nil),                      // 20: xai_api.Function
	(*ToolCall)(nil),                      // 21: xai_api.ToolCall
	(*FunctionCall)(nil),                  // 22: xai_api.FunctionCall
	(*ResponseFormat)(nil),                // 23: xai_api.ResponseFormat
	(*SearchParameters)(nil),              // 24: xai_api.SearchParameters
	(*Source)(nil),                        // 25: xai_api.Source
	(*WebSource)(nil),                     // 26: xai_api.WebSource
	(*NewsSource)(nil),                    // 27: xai_api.NewsSource
	(*XSource)(nil),                       // 28: xai_api.XSource
	(*RssSource)(nil),                     // 29: xai_api.RssSource
	(*timestamppb.Timestamp)(nil),         // 30: google.protobuf.Timestamp
	(*SamplingUsage)(nil),                 // 31: xai_api.SamplingUsage
	(DeferredStatus)(0),                   // 32: xai_api.DeferredStatus
	(FinishReason)(0),                     // 33: xai_api.FinishReason
	(*ImageUrlContent)(nil),               // 34: xai_api.ImageUrlContent
	(*GetDeferredRequest)(nil),            // 35: xai_api.GetDeferredRequest
	(*StartDeferredResponse)(nil),         // 36: xai_api.StartDeferredResponse
}
var file_xai_api_v1_chat_proto_depIdxs = []int32{
	17, // 0: xai_api.GetCompletionsRequest.messages:type_name -> xai_api.Message
	19, // 1: xai_api.GetCompletionsRequest.tools:type_name -> xai_api.Tool
	18, // 2: xai_api.GetCompletionsRequest.tool_choice:type_name -> xai_api.ToolChoice
	23, // 3: xai_api.GetCompletionsRequest.response_format:type_name -> xai_api.ResponseFormat
	1,  // 4: xai_api.GetCompletionsRequest.reasoning_effort:type_name -> xai_api.ReasoningEffort
	24, // 5: xai_api.GetCompletionsRequest.search_parameters:type_name -> xai_api.SearchParameters
	9,  // 6: xai_api.GetChatCompletionResponse.choices:type_name -> xai_api.Choice
	30, // 7: xai_api.GetChatCompletionResponse.created:type_name -> google.protobuf.Timestamp
	31, // 8: xai_api.GetChatCompletionResponse.usage:type_name -> xai_api.SamplingUsage
	11, // 9: xai_api.GetChatCompletionChunk.choices:type_name -> xai_api.ChoiceChunk
	30, // 10: xai_api.GetChatCompletionChunk.created:type_name -> google.protobuf.Timestamp
	31, // 11: xai_api.GetChatCompletionChunk.usage:type_name -> xai_api.SamplingUsage
	32, // 12: xai_api.GetDeferredCompletionResponse.status:type_name -> xai_api.DeferredStatus
	6,  // 13: xai_api.GetDeferredCompletionResponse.response:type_name -> xai_api.GetChatCompletionResponse
	33, // 14: xai_api.Choice.finish_reason:type_name -> xai_api.FinishReason
	10, // 15: xai_api.Choice.message:type_name -> xai_api.CompletionMessage
	13, // 16: xai_api.Choice.logprobs:type_name -> xai_api.LogProbs
	0,  // 17: xai_api.CompletionMessage.role:type_name -> xai_api.MessageRole
	21, // 18: xai_api.CompletionMessage.tool_calls:type_name -> xai_api.ToolCall
	12, // 19: xai_api.ChoiceChunk.delta:type_name -> xai_api.Delta
	13, // 20: xai_api.ChoiceChunk.logprobs:type_name -> xai_api.LogProbs
	33, // 21: xai_api.ChoiceChunk.finish_reason:type_name -> xai_api.FinishReason
	0,  // 22: xai_api.Delta.role:type_name -> xai_api.MessageRole
	21, // 23: xai_api.Delta.tool_calls:type_name -> xai_api.ToolCall
	14, // 24: xai_api.LogProbs.content:type_name -> xai_api.LogProb
	15, // 25: xai_api.LogProb.top_logprobs:type_name -> xai_api.TopLogProb
	34, // 26: xai_api.Content.image_url:type_name -> xai_api.ImageUrlContent
	16, // 27: xai_api.Message.content:type_name -> xai_api.Content
	0,  // 28: xai_api.Message.role:type_name -> xai_api.MessageRole
	21, // 29: xai_api.Message.tool_calls:type_name -> xai_api.ToolCall
	2,  // 30: xai_api.ToolChoice.mode:type_name -> xai_api.ToolMode
	20, // 31: xai_api.Tool.function:type_name -> xai_api.Function
	22, // 32: xai_api.ToolCall.function:type_name -> xai_api.FunctionCall
	3,  // 33: xai_api.ResponseFormat.format_type:type_name -> xai_api.FormatType
	4,  // 34: xai_api.SearchParameters.mode:type_name -> xai_api.SearchMode
	25, // 35: xai_api.SearchParameters.sources:type_name -> xai_api.Source
	30, // 36: xai_api.SearchParameters.from_date:type_name -> google.protobuf.Timestamp
	30, // 37: xai_api.SearchParameters.to_date:type_name -> google.protobuf.Timestamp
	26, // 38: xai_api.Source.web:type_name -> xai_api.WebSource
	27, // 39: xai_api.Source.news:type_name -> xai_api.NewsSource
	28, // 40: xai_api.Source.x:type_name -> xai_api.XSource
	29, // 41: xai_api.Source.rss:type_name -> xai_api.RssSource
	5,  // 42: xai_api.Chat.GetCompletion:input_type -> xai_api.GetCompletionsRequest
	5,  // 43: xai_api.Chat.GetCompletionChunk:input_type -> xai_api.GetCompletionsRequest
	5,  // 44: xai_api.Chat.StartDeferredCompletion:input_type -> xai_api.GetCompletionsRequest
	35, // 45: xai_api.Chat.GetDeferredCompletion:input_type -> xai_api.GetDeferredRequest
	6,  // 46: xai_api.Chat.GetCompletion:output_type -> xai_api.GetChatCompletionResponse
	7,  // 47: xai_api.Chat.GetCompletionChunk:output_type -> xai_api.GetChatCompletionChunk
	36, // 48: xai_api.Chat.StartDeferredCompletion:output_type -> xai_api.StartDeferredResponse
	8,  // 49: xai_api.Chat.GetDeferredCompletion:output_type -> xai_api.GetDeferredCompletionResponse
	46, // [46:50] is the sub-list for method output_type
	42, // [42:46] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_xai_api_v1_chat_proto_init() }
func file_xai_api_v1_chat_proto_init() {
	if File_xai_api_v1_chat_proto != nil {
		return
	}
	file_xai_api_v1_deferred_proto_init()
	file_xai_api_v1_image_proto_init()
	file_xai_api_v1_sample_proto_init()
	file_xai_api_v1_usage_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_xai_api_v1_chat_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetCompletionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetChatCompletionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetChatCompletionChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetDeferredCompletionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CompletionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ChoiceChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Delta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*LogProbs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*LogProb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*TopLogProb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ToolChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Tool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Function); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ToolCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*FunctionCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ResponseFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*SearchParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*WebSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*NewsSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*XSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xai_api_v1_chat_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*RssSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_xai_api_v1_chat_proto_msgTypes[0].OneofWrappers = []any{}
	file_xai_api_v1_chat_proto_msgTypes[3].OneofWrappers = []any{}
	file_xai_api_v1_chat_proto_msgTypes[11].OneofWrappers = []any{
		(*Content_Text)(nil),
		(*Content_ImageUrl)(nil),
	}
	file_xai_api_v1_chat_proto_msgTypes[12].OneofWrappers = []any{}
	file_xai_api_v1_chat_proto_msgTypes[13].OneofWrappers = []any{
		(*ToolChoice_Mode)(nil),
		(*ToolChoice_FunctionName)(nil),
	}
	file_xai_api_v1_chat_proto_msgTypes[14].OneofWrappers = []any{
		(*Tool_Function)(nil),
	}
	file_xai_api_v1_chat_proto_msgTypes[16].OneofWrappers = []any{
		(*ToolCall_Function)(nil),
	}
	file_xai_api_v1_chat_proto_msgTypes[18].OneofWrappers = []any{}
	file_xai_api_v1_chat_proto_msgTypes[19].OneofWrappers = []any{}
	file_xai_api_v1_chat_proto_msgTypes[20].OneofWrappers = []any{
		(*Source_Web)(nil),
		(*Source_News)(nil),
		(*Source_X)(nil),
		(*Source_Rss)(nil),
	}
	file_xai_api_v1_chat_proto_msgTypes[21].OneofWrappers = []any{}
	file_xai_api_v1_chat_proto_msgTypes[22].OneofWrappers = []any{}
	file_xai_api_v1_chat_proto_msgTypes[23].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xai_api_v1_chat_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_xai_api_v1_chat_proto_goTypes,
		DependencyIndexes: file_xai_api_v1_chat_proto_depIdxs,
		EnumInfos:         file_xai_api_v1_chat_proto_enumTypes,
		MessageInfos:      file_xai_api_v1_chat_proto_msgTypes,
	}.Build()
	File_xai_api_v1_chat_proto = out.File
	file_xai_api_v1_chat_proto_rawDesc = nil
	file_xai_api_v1_chat_proto_goTypes = nil
	file_xai_api_v1_chat_proto_depIdxs = nil
}
