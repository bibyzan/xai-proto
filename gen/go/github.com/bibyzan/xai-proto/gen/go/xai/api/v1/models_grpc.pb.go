// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: xai/api/v1/models.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Models_ListLanguageModels_FullMethodName        = "/xai_api.Models/ListLanguageModels"
	Models_ListEmbeddingModels_FullMethodName       = "/xai_api.Models/ListEmbeddingModels"
	Models_ListImageGenerationModels_FullMethodName = "/xai_api.Models/ListImageGenerationModels"
	Models_GetLanguageModel_FullMethodName          = "/xai_api.Models/GetLanguageModel"
	Models_GetEmbeddingModel_FullMethodName         = "/xai_api.Models/GetEmbeddingModel"
	Models_GetImageGenerationModel_FullMethodName   = "/xai_api.Models/GetImageGenerationModel"
)

// ModelsClient is the client API for Models service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// An API service that let users get details of available models on the
// platform.
type ModelsClient interface {
	// Lists all language models available to your team (based on the API key).
	ListLanguageModels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListLanguageModelsResponse, error)
	// Lists all embedding models available to your team (based on the API key).
	ListEmbeddingModels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListEmbeddingModelsResponse, error)
	// Lists all image generation models available to your team (based on the API key).
	ListImageGenerationModels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListImageGenerationModelsResponse, error)
	// Get details of a specific language model by model name.
	GetLanguageModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*LanguageModel, error)
	// Get details of a specific embedding model by model name.
	GetEmbeddingModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*EmbeddingModel, error)
	// Get details of a specific image generation model by model name.
	GetImageGenerationModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*ImageGenerationModel, error)
}

type modelsClient struct {
	cc grpc.ClientConnInterface
}

func NewModelsClient(cc grpc.ClientConnInterface) ModelsClient {
	return &modelsClient{cc}
}

func (c *modelsClient) ListLanguageModels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListLanguageModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLanguageModelsResponse)
	err := c.cc.Invoke(ctx, Models_ListLanguageModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsClient) ListEmbeddingModels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListEmbeddingModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEmbeddingModelsResponse)
	err := c.cc.Invoke(ctx, Models_ListEmbeddingModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsClient) ListImageGenerationModels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListImageGenerationModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListImageGenerationModelsResponse)
	err := c.cc.Invoke(ctx, Models_ListImageGenerationModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsClient) GetLanguageModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*LanguageModel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LanguageModel)
	err := c.cc.Invoke(ctx, Models_GetLanguageModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsClient) GetEmbeddingModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*EmbeddingModel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmbeddingModel)
	err := c.cc.Invoke(ctx, Models_GetEmbeddingModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsClient) GetImageGenerationModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*ImageGenerationModel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageGenerationModel)
	err := c.cc.Invoke(ctx, Models_GetImageGenerationModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelsServer is the server API for Models service.
// All implementations should embed UnimplementedModelsServer
// for forward compatibility.
//
// An API service that let users get details of available models on the
// platform.
type ModelsServer interface {
	// Lists all language models available to your team (based on the API key).
	ListLanguageModels(context.Context, *emptypb.Empty) (*ListLanguageModelsResponse, error)
	// Lists all embedding models available to your team (based on the API key).
	ListEmbeddingModels(context.Context, *emptypb.Empty) (*ListEmbeddingModelsResponse, error)
	// Lists all image generation models available to your team (based on the API key).
	ListImageGenerationModels(context.Context, *emptypb.Empty) (*ListImageGenerationModelsResponse, error)
	// Get details of a specific language model by model name.
	GetLanguageModel(context.Context, *GetModelRequest) (*LanguageModel, error)
	// Get details of a specific embedding model by model name.
	GetEmbeddingModel(context.Context, *GetModelRequest) (*EmbeddingModel, error)
	// Get details of a specific image generation model by model name.
	GetImageGenerationModel(context.Context, *GetModelRequest) (*ImageGenerationModel, error)
}

// UnimplementedModelsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModelsServer struct{}

func (UnimplementedModelsServer) ListLanguageModels(context.Context, *emptypb.Empty) (*ListLanguageModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLanguageModels not implemented")
}
func (UnimplementedModelsServer) ListEmbeddingModels(context.Context, *emptypb.Empty) (*ListEmbeddingModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmbeddingModels not implemented")
}
func (UnimplementedModelsServer) ListImageGenerationModels(context.Context, *emptypb.Empty) (*ListImageGenerationModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImageGenerationModels not implemented")
}
func (UnimplementedModelsServer) GetLanguageModel(context.Context, *GetModelRequest) (*LanguageModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguageModel not implemented")
}
func (UnimplementedModelsServer) GetEmbeddingModel(context.Context, *GetModelRequest) (*EmbeddingModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmbeddingModel not implemented")
}
func (UnimplementedModelsServer) GetImageGenerationModel(context.Context, *GetModelRequest) (*ImageGenerationModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageGenerationModel not implemented")
}
func (UnimplementedModelsServer) testEmbeddedByValue() {}

// UnsafeModelsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelsServer will
// result in compilation errors.
type UnsafeModelsServer interface {
	mustEmbedUnimplementedModelsServer()
}

func RegisterModelsServer(s grpc.ServiceRegistrar, srv ModelsServer) {
	// If the following call pancis, it indicates UnimplementedModelsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Models_ServiceDesc, srv)
}

func _Models_ListLanguageModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsServer).ListLanguageModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Models_ListLanguageModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsServer).ListLanguageModels(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Models_ListEmbeddingModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsServer).ListEmbeddingModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Models_ListEmbeddingModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsServer).ListEmbeddingModels(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Models_ListImageGenerationModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsServer).ListImageGenerationModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Models_ListImageGenerationModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsServer).ListImageGenerationModels(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Models_GetLanguageModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsServer).GetLanguageModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Models_GetLanguageModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsServer).GetLanguageModel(ctx, req.(*GetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Models_GetEmbeddingModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsServer).GetEmbeddingModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Models_GetEmbeddingModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsServer).GetEmbeddingModel(ctx, req.(*GetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Models_GetImageGenerationModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsServer).GetImageGenerationModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Models_GetImageGenerationModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsServer).GetImageGenerationModel(ctx, req.(*GetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Models_ServiceDesc is the grpc.ServiceDesc for Models service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Models_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xai_api.Models",
	HandlerType: (*ModelsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLanguageModels",
			Handler:    _Models_ListLanguageModels_Handler,
		},
		{
			MethodName: "ListEmbeddingModels",
			Handler:    _Models_ListEmbeddingModels_Handler,
		},
		{
			MethodName: "ListImageGenerationModels",
			Handler:    _Models_ListImageGenerationModels_Handler,
		},
		{
			MethodName: "GetLanguageModel",
			Handler:    _Models_GetLanguageModel_Handler,
		},
		{
			MethodName: "GetEmbeddingModel",
			Handler:    _Models_GetEmbeddingModel_Handler,
		},
		{
			MethodName: "GetImageGenerationModel",
			Handler:    _Models_GetImageGenerationModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xai/api/v1/models.proto",
}
